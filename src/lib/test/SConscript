# coding=utf-8


# Copyright 2009 Tomi Jylh√§-Ollila
#
# This file is part of Kunquat.
#
# Kunquat is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Kunquat is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Kunquat.  If not, see <http://www.gnu.org/licenses/>.


Import('env')

env_test = env.Clone()

env_test.Append(CPPPATH = ['#/src/lib',
                           '#/src/lib/events',
                           '#/src/lib/generators',
                           '#/src/include'])
env_test.Append(LIBPATH = ['#/src/lib'])
env_test.Append(LIBS = ['kunquat'])

real          = env_test.Program('real', ['real.c'])
scale         = env_test.Program('scale', ['scale.c'])
reltime       = env_test.Program('reltime', ['reltime.c'])
event         = env_test.Program('event', ['event.c'])
event_queue   = env_test.Program('event_queue', ['event_queue.c'])
voice_state   = env_test.Program('voice_state', ['voice_state.c'])
instrument    = env_test.Program('instrument', ['instrument.c'])
ins_table     = env_test.Program('ins_table', ['ins_table.c'])
voice         = env_test.Program('voice', ['voice.c'])
voice_pool    = env_test.Program('voice_pool', ['voice_pool.c'])
column        = env_test.Program('column', ['column.c'])
channel       = env_test.Program('channel', ['channel.c'])
subsong_table = env_test.Program('subsong_table', ['subsong_table.c'])
pat_table     = env_test.Program('pat_table', ['pat_table.c'])
pattern       = env_test.Program('pattern', ['pattern.c'])
song          = env_test.Program('song', ['song.c'])

if not env.GetOption('clean'):
    env_test.AddPostAction(real, 'env ' + real[0].abspath)
    env_test.AddPostAction(scale, 'env ' + scale[0].abspath)
    env_test.AddPostAction(reltime, 'env ' + reltime[0].abspath)
    env_test.AddPostAction(event, 'env ' + event[0].abspath)
    env_test.AddPostAction(event_queue, 'env ' + event_queue[0].abspath)
    env_test.AddPostAction(voice_state, 'env ' + voice_state[0].abspath)
    env_test.AddPostAction(instrument, 'env ' + instrument[0].abspath)
    env_test.AddPostAction(ins_table, 'env ' + ins_table[0].abspath)
    env_test.AddPostAction(voice, 'env ' + voice[0].abspath)
    env_test.AddPostAction(voice_pool, 'env ' + voice_pool[0].abspath)
    env_test.AddPostAction(column, 'env ' + column[0].abspath)
    env_test.AddPostAction(channel, 'env ' + channel[0].abspath)
    env_test.AddPostAction(subsong_table, 'env ' + subsong_table[0].abspath)
    env_test.AddPostAction(pat_table, 'env ' + pat_table[0].abspath)
    env_test.AddPostAction(pattern, 'env ' + pattern[0].abspath)
    env_test.AddPostAction(song, 'env ' + song[0].abspath)


