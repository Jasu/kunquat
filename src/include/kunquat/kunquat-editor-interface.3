.TH kunquat\-editor\-interface 3 "2010\-01\-18" "" "Kunquat"

.SH NAME
Kunquat editor API

.SH SYNOPSIS
.B #include <kunquat/Editor.h>

.BI "kqt_Handle* kqt_new_Handle_rwc(char* " path );

.BI "int kqt_Handle_commit(kqt_Handle* " handle );

.SH "COMPOSITION PROJECT HANDLING"

The editor API provides a new function for creating Kunquat composition
project handles. Data inside these handles can be accessed with the functions
described in
.BR kunquat-handle (3).
In addition, the user of the Handle can commit the changes made in the Handle.

.IP "\fBkqt_Handle* kqt_new_Handle_rwc(char*\fR \fIpath\fR\fB);\fR"
Creates a new Kunquat Handle based on the composition project directory
\fIpath\fR. Normally, this directory contains the subdirectories
\fIcommitted\fR and \fIworkspace\fR, although new project directories may be
empty. The function returns the new Kunquat Handle on success, or NULL if
an error occurred.

.IP "\fBint kqt_Handle_commit(kqt_Handle*\fR \fIhandle\fR\fB);\fR"
Commits the changes made in \fIhandle\fR. The function returns 1 on success,
0 on error. If an error occurs during the commit, it is usually a good idea to
destroy the Handle with
.BR kqt_del_Handle (3)
and create a new one with \fBkqt_new_Handle_rwc\fR. This will initiate a
recovery procedure that will restore a valid composition state. Changes made
after the last successful commit are possibly lost in this case, though.

.SH ERRORS

If
.B kqt_new_Handle_rwc
returns NULL, an error description can be retrieved with
.BR kqt_Handle_get_error (NULL).
If \fBkqt_Handle_commit(\fR\fIhandle\fR\fB)\fR returns
0, an error description can be retrieved with
\fBkqt_Handle_get_error(\fR\fIhandle\fR\fB)\fR. See
.BR kunquat-handle (3)
for more details.

.SH "SEE ALSO"

.BR kqt_Handle_get_error (3)

.BR kqt_Handle_set_data (3)


