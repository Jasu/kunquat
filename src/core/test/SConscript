# coding=utf-8


# Copyright 2009 Tomi Jylh√§-Ollila
#
# This file is part of Kunquat.
#
# Kunquat is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Kunquat is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Kunquat.  If not, see <http://www.gnu.org/licenses/>.


Import('env')

env_test = env.Clone()

env_test.Append(CPPPATH = ['#/src/core'])
env_test.Append(LIBPATH = ['#/src/core'])
env_test.Append(LIBS = ['core'])

real = env_test.Program('real', ['real.c'])
if not env.GetOption('clean'):
    env_test.AddPostAction(real, real[0].abspath)

note_table = env_test.Program('note_table', ['note_table.c'])
if not env.GetOption('clean'):
    env_test.AddPostAction(note_table, note_table[0].abspath)
Depends(note_table, 'real')

reltime = env_test.Program('reltime', ['reltime.c'])
if not env.GetOption('clean'):
    env_test.AddPostAction(reltime, reltime[0].abspath)

event = env_test.Program('event', ['event.c'])
if not env.GetOption('clean'):
    env_test.AddPostAction(event, event[0].abspath)
Depends(event, 'reltime')

event_queue = env_test.Program('event_queue', ['event_queue.c'])
if not env.GetOption('clean'):
    env_test.AddPostAction(event_queue, event_queue[0].abspath)
Depends(event_queue, 'event')

voice_state = env_test.Program('voice_state', ['voice_state.c'])
if not env.GetOption('clean'):
    env_test.AddPostAction(voice_state, voice_state[0].abspath)

instrument = env_test.Program('instrument', ['instrument.c'])
if not env.GetOption('clean'):
    env_test.AddPostAction(instrument, instrument[0].abspath)
Depends(instrument, 'voice_state')
Depends(instrument, 'event_queue')
Depends(instrument, 'note_table')

ins_table = env_test.Program('ins_table', ['ins_table.c'])
if not env.GetOption('clean'):
    env_test.AddPostAction(ins_table, ins_table[0].abspath)
Depends(ins_table, 'instrument')

voice = env_test.Program('voice', ['voice.c'])
if not env.GetOption('clean'):
    env_test.AddPostAction(voice, voice[0].abspath)
Depends(voice, 'instrument')

voice_pool = env_test.Program('voice_pool', ['voice_pool.c'])
if not env.GetOption('clean'):
    env_test.AddPostAction(voice_pool, voice_pool[0].abspath)
Depends(voice_pool, 'voice')

column = env_test.Program('column', ['column.c'])
if not env.GetOption('clean'):
    env_test.AddPostAction(column, column[0].abspath)
#Depends(column, 'reltime')
Depends(column, 'event')

channel = env_test.Program('channel', ['channel.c'])
if not env.GetOption('clean'):
    env_test.AddPostAction(channel, channel[0].abspath)
Depends(channel, 'column')
Depends(channel, 'voice_pool')
Depends(channel, 'ins_table')

order = env_test.Program('order', ['order.c'])
if not env.GetOption('clean'):
    env_test.AddPostAction(order, order[0].abspath)

pat_table = env_test.Program('pat_table', ['pat_table.c'])
if not env.GetOption('clean'):
    env_test.AddPostAction(pat_table, pat_table[0].abspath)

pattern = env_test.Program('pattern', ['pattern.c'])
if not env.GetOption('clean'):
    env_test.AddPostAction(pattern, pattern[0].abspath)
Depends(pattern, 'channel')
#Depends(pattern, 'column')
Depends(pattern, 'order')
Depends(pattern, 'pat_table')

song = env_test.Program('song', ['song.c'])
if not env.GetOption('clean'):
    env_test.AddPostAction(song, song[0].abspath)
Depends(song, 'pattern')


